// Exercise 3:

CREATE OR REPLACE PROCEDURE check_date IS
    CURSOR cr IS 
        SELECT CA.StartDate, CA.EndDate, C.CourseName 
        FROM COURSE_ASSINMENT CA 
        JOIN COURSE C 
        ON CA.CourseId = C.CourseID; -- Removed GROUP BY, as itâ€™s unnecessary for this context

    c_row cr%ROWTYPE;
BEGIN
    FOR c_row IN cr LOOP
        IF c_row.StartDate >= c_row.EndDate THEN
            DBMS_OUTPUT.PUT_LINE('The start date of the course named ' || c_row.CourseName || ' is invalid');
        ELSE
            DBMS_OUTPUT.PUT_LINE('The date of the course ' || c_row.CourseName || ' is valid');
        END IF;
    END LOOP;
END check_date;
/


// Exercise 4:

CREATE OR REPLACE PROCEDURE count_student_enrollment IS
    CURSOR cr IS
        SELECT S.FirstName, S.LastName, COUNT(E.CourseId) AS NumberOfCourses
        FROM STUDENT S
        JOIN ENROLLMENT E ON S.StudentId = E.StudentId
        GROUP BY S.FirstName, S.LastName; 

    c_row cr%ROWTYPE;
BEGIN
    FOR c_row IN cr LOOP
        DBMS_OUTPUT.PUT_LINE('The student ' || c_row.FirstName || ' ' || c_row.LastName || 
                             ' is enrolled in ' || c_row.NumberOfCourses || ' course(s).');
    END LOOP;
END count_student_enrollment;
/


// Exercise 5:
CREATE OR REPLACE PROCEDURE add_exam_result (
    p_result_id IN NUMBER,
    p_student_id IN NUMBER,
    p_exam_id IN NUMBER,
    p_score IN NUMBER
) IS
    -- Custom exceptions
    e_duplicate_result EXCEPTION;
    e_student_not_found EXCEPTION;
    e_exam_not_found EXCEPTION;

    -- Variables for checks
    v_count NUMBER;
BEGIN
    -- Check if ResultID is unique
    SELECT COUNT(*)
    INTO v_count
    FROM EXAM_RESULT
    WHERE ResultID = p_result_id;

    IF v_count > 0 THEN
        RAISE e_duplicate_result;
    END IF;

    -- Check if StudentID exists in the STUDENT table
    SELECT COUNT(*)
    INTO v_count
    FROM STUDENT
    WHERE StudentID = p_student_id;

    IF v_count = 0 THEN
        RAISE e_student_not_found;
    END IF;

    -- Check if ExamID exists in the EXAM table
    SELECT COUNT(*)
    INTO v_count
    FROM EXAM
    WHERE ExamID = p_exam_id;

    IF v_count = 0 THEN
        RAISE e_exam_not_found;
    END IF;

    -- Insert the new exam result
    INSERT INTO EXAM_RESULT (ResultID, StudentID, ExamID, Score)
    VALUES (p_result_id, p_student_id, p_exam_id, p_score);

    -- Confirmation message
    DBMS_OUTPUT.PUT_LINE('Exam result added successfully for StudentID ' || p_student_id || 
                         ' and ExamID ' || p_exam_id || '.');

EXCEPTION
    WHEN e_duplicate_result THEN
        DBMS_OUTPUT.PUT_LINE('Error: ResultID ' || p_result_id || ' already exists.');
    WHEN e_student_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: StudentID ' || p_student_id || ' does not exist.');
    WHEN e_exam_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: ExamID ' || p_exam_id || ' does not exist.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END add_exam_result;
/

